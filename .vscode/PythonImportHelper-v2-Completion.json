[
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "inspect",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "ValidateEmail",
        "importPath": "flask_validator",
        "description": "flask_validator",
        "isExtraImport": true,
        "detail": "flask_validator",
        "documentation": {}
    },
    {
        "label": "ValidateString",
        "importPath": "flask_validator",
        "description": "flask_validator",
        "isExtraImport": true,
        "detail": "flask_validator",
        "documentation": {}
    },
    {
        "label": "ValidateCountry",
        "importPath": "flask_validator",
        "description": "flask_validator",
        "isExtraImport": true,
        "detail": "flask_validator",
        "documentation": {}
    },
    {
        "label": "validates",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "Scripts.activate_this",
        "description": "Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "Scripts.activate_this",
        "description": "Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "Scripts.activate_this",
        "description": "Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "Scripts.activate_this",
        "description": "Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "Scripts.activate_this",
        "description": "Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "Scripts.activate_this",
        "description": "Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "Scripts.activate_this",
        "description": "Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "Scripts.activate_this",
        "description": "Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "Scripts.activate_this",
        "description": "Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "list_all_accounts_controller",
        "kind": 2,
        "importPath": "src.accounts.controllers",
        "description": "src.accounts.controllers",
        "peekOfCode": "def list_all_accounts_controller():\n    accounts = Account.query.all()\n    response = []\n    for account in accounts: response.append(account.toDict())\n    return jsonify(response)\ndef create_account_controller():\n    request_form = request.form.to_dict()\n    id = str(uuid.uuid4())\n    print(request_form)\n    new_account = Account(",
        "detail": "src.accounts.controllers",
        "documentation": {}
    },
    {
        "label": "create_account_controller",
        "kind": 2,
        "importPath": "src.accounts.controllers",
        "description": "src.accounts.controllers",
        "peekOfCode": "def create_account_controller():\n    request_form = request.form.to_dict()\n    id = str(uuid.uuid4())\n    print(request_form)\n    new_account = Account(\n                          id             = id,\n                          email          = request_form['email'],\n                          username       = request_form['username'],\n                          dob            = request_form['dob'],\n                          country        = request_form['country'],",
        "detail": "src.accounts.controllers",
        "documentation": {}
    },
    {
        "label": "retrieve_account_controller",
        "kind": 2,
        "importPath": "src.accounts.controllers",
        "description": "src.accounts.controllers",
        "peekOfCode": "def retrieve_account_controller(account_id):\n    response = Account.query.get(account_id).toDict()\n    return jsonify(response)\ndef update_account_controller(account_id):\n    request_form = request.form.to_dict()\n    account = Account.query.get(account_id)\n    account.email        = request_form['email']\n    account.username     = request_form['username']\n    account.dob          = request_form['dob']\n    account.country      = request_form['country']",
        "detail": "src.accounts.controllers",
        "documentation": {}
    },
    {
        "label": "update_account_controller",
        "kind": 2,
        "importPath": "src.accounts.controllers",
        "description": "src.accounts.controllers",
        "peekOfCode": "def update_account_controller(account_id):\n    request_form = request.form.to_dict()\n    account = Account.query.get(account_id)\n    account.email        = request_form['email']\n    account.username     = request_form['username']\n    account.dob          = request_form['dob']\n    account.country      = request_form['country']\n    account.phone_number = request_form['phone_number']\n    db.session.commit()\n    response = Account.query.get(account_id).toDict()",
        "detail": "src.accounts.controllers",
        "documentation": {}
    },
    {
        "label": "delete_account_controller",
        "kind": 2,
        "importPath": "src.accounts.controllers",
        "description": "src.accounts.controllers",
        "peekOfCode": "def delete_account_controller(account_id):\n    Account.query.filter_by(id=account_id).delete()\n    db.session.commit()\n    return ('Account with Id \"{}\" deleted successfully!').format(account_id)",
        "detail": "src.accounts.controllers",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "src.accounts.models",
        "description": "src.accounts.models",
        "peekOfCode": "class Account(db.Model):\n# Auto Generated Fields:\n    id           = db.Column(db.String(50), primary_key=True, nullable=False, unique=True)\n    created      = db.Column(db.DateTime(timezone=True), default=datetime.now)                           # The Date of the Instance Creation => Created one Time when Instantiation\n    updated      = db.Column(db.DateTime(timezone=True), default=datetime.now, onupdate=datetime.now)    # The Date of the Instance Update => Changed with Every Update\n# Input by User Fields:\n    email        = db.Column(db.String(100), nullable=False, unique=True)\n    username     = db.Column(db.String(100), nullable=False)\n    dob          = db.Column(db.Date)\n    country      = db.Column(db.String(100))",
        "detail": "src.accounts.models",
        "documentation": {}
    },
    {
        "label": "list_create_accounts",
        "kind": 2,
        "importPath": "src.accounts.urls",
        "description": "src.accounts.urls",
        "peekOfCode": "def list_create_accounts():\n    if request.method == 'GET': return list_all_accounts_controller()\n    if request.method == 'POST': return create_account_controller()\n    else: return 'Method is Not Allowed'\n@app.route(\"/accounts/<account_id>\", methods=['GET', 'PUT', 'DELETE'])\ndef retrieve_update_destroy_accounts(account_id):\n    if request.method == 'GET': return retrieve_account_controller(account_id)\n    if request.method == 'PUT': return update_account_controller(account_id)\n    if request.method == 'DELETE': return delete_account_controller(account_id)\n    else: return 'Method is Not Allowed'",
        "detail": "src.accounts.urls",
        "documentation": {}
    },
    {
        "label": "retrieve_update_destroy_accounts",
        "kind": 2,
        "importPath": "src.accounts.urls",
        "description": "src.accounts.urls",
        "peekOfCode": "def retrieve_update_destroy_accounts(account_id):\n    if request.method == 'GET': return retrieve_account_controller(account_id)\n    if request.method == 'PUT': return update_account_controller(account_id)\n    if request.method == 'DELETE': return delete_account_controller(account_id)\n    else: return 'Method is Not Allowed'",
        "detail": "src.accounts.urls",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "src.migrations.versions.24e6fb1ea3c7_",
        "description": "src.migrations.versions.24e6fb1ea3c7_",
        "peekOfCode": "def upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('account',\n    sa.Column('id', sa.String(length=50), nullable=False),\n    sa.Column('created', sa.DateTime(timezone=True), nullable=True),\n    sa.Column('updated', sa.DateTime(timezone=True), nullable=True),\n    sa.Column('email', sa.String(length=100), nullable=False),\n    sa.Column('username', sa.String(length=100), nullable=False),\n    sa.Column('dob', sa.Date(), nullable=True),\n    sa.Column('country', sa.String(length=100), nullable=True),",
        "detail": "src.migrations.versions.24e6fb1ea3c7_",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "src.migrations.versions.24e6fb1ea3c7_",
        "description": "src.migrations.versions.24e6fb1ea3c7_",
        "peekOfCode": "def downgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('account')\n    # ### end Alembic commands ###",
        "detail": "src.migrations.versions.24e6fb1ea3c7_",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "src.migrations.versions.24e6fb1ea3c7_",
        "description": "src.migrations.versions.24e6fb1ea3c7_",
        "peekOfCode": "revision = '24e6fb1ea3c7'\ndown_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('account',\n    sa.Column('id', sa.String(length=50), nullable=False),\n    sa.Column('created', sa.DateTime(timezone=True), nullable=True),\n    sa.Column('updated', sa.DateTime(timezone=True), nullable=True),",
        "detail": "src.migrations.versions.24e6fb1ea3c7_",
        "documentation": {}
    },
    {
        "label": "down_revision",
        "kind": 5,
        "importPath": "src.migrations.versions.24e6fb1ea3c7_",
        "description": "src.migrations.versions.24e6fb1ea3c7_",
        "peekOfCode": "down_revision = None\nbranch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('account',\n    sa.Column('id', sa.String(length=50), nullable=False),\n    sa.Column('created', sa.DateTime(timezone=True), nullable=True),\n    sa.Column('updated', sa.DateTime(timezone=True), nullable=True),\n    sa.Column('email', sa.String(length=100), nullable=False),",
        "detail": "src.migrations.versions.24e6fb1ea3c7_",
        "documentation": {}
    },
    {
        "label": "branch_labels",
        "kind": 5,
        "importPath": "src.migrations.versions.24e6fb1ea3c7_",
        "description": "src.migrations.versions.24e6fb1ea3c7_",
        "peekOfCode": "branch_labels = None\ndepends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('account',\n    sa.Column('id', sa.String(length=50), nullable=False),\n    sa.Column('created', sa.DateTime(timezone=True), nullable=True),\n    sa.Column('updated', sa.DateTime(timezone=True), nullable=True),\n    sa.Column('email', sa.String(length=100), nullable=False),\n    sa.Column('username', sa.String(length=100), nullable=False),",
        "detail": "src.migrations.versions.24e6fb1ea3c7_",
        "documentation": {}
    },
    {
        "label": "depends_on",
        "kind": 5,
        "importPath": "src.migrations.versions.24e6fb1ea3c7_",
        "description": "src.migrations.versions.24e6fb1ea3c7_",
        "peekOfCode": "depends_on = None\ndef upgrade():\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('account',\n    sa.Column('id', sa.String(length=50), nullable=False),\n    sa.Column('created', sa.DateTime(timezone=True), nullable=True),\n    sa.Column('updated', sa.DateTime(timezone=True), nullable=True),\n    sa.Column('email', sa.String(length=100), nullable=False),\n    sa.Column('username', sa.String(length=100), nullable=False),\n    sa.Column('dob', sa.Date(), nullable=True),",
        "detail": "src.migrations.versions.24e6fb1ea3c7_",
        "documentation": {}
    },
    {
        "label": "get_engine",
        "kind": 2,
        "importPath": "src.migrations.env",
        "description": "src.migrations.env",
        "peekOfCode": "def get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\ndef get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(",
        "detail": "src.migrations.env",
        "documentation": {}
    },
    {
        "label": "get_engine_url",
        "kind": 2,
        "importPath": "src.migrations.env",
        "description": "src.migrations.env",
        "peekOfCode": "def get_engine_url():\n    try:\n        return get_engine().url.render_as_string(hide_password=False).replace(\n            '%', '%%')\n    except AttributeError:\n        return str(get_engine().url).replace('%', '%%')\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata",
        "detail": "src.migrations.env",
        "documentation": {}
    },
    {
        "label": "get_metadata",
        "kind": 2,
        "importPath": "src.migrations.env",
        "description": "src.migrations.env",
        "peekOfCode": "def get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.",
        "detail": "src.migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "src.migrations.env",
        "description": "src.migrations.env",
        "peekOfCode": "def run_migrations_offline():\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "src.migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "src.migrations.env",
        "description": "src.migrations.env",
        "peekOfCode": "def run_migrations_online():\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    # this callback is used to prevent an auto-migration from being generated\n    # when there are no changes to the schema\n    # reference: http://alembic.zzzcomputing.com/en/latest/cookbook.html\n    def process_revision_directives(context, revision, directives):\n        if getattr(config.cmd_opts, 'autogenerate', False):",
        "detail": "src.migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "src.migrations.env",
        "description": "src.migrations.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nfileConfig(config.config_file_name)\nlogger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):",
        "detail": "src.migrations.env",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.migrations.env",
        "description": "src.migrations.env",
        "peekOfCode": "logger = logging.getLogger('alembic.env')\ndef get_engine():\n    try:\n        # this works with Flask-SQLAlchemy<3 and Alchemical\n        return current_app.extensions['migrate'].db.get_engine()\n    except (TypeError, AttributeError):\n        # this works with Flask-SQLAlchemy>=3\n        return current_app.extensions['migrate'].db.engine\ndef get_engine_url():\n    try:",
        "detail": "src.migrations.env",
        "documentation": {}
    },
    {
        "label": "target_db",
        "kind": 5,
        "importPath": "src.migrations.env",
        "description": "src.migrations.env",
        "peekOfCode": "target_db = current_app.extensions['migrate'].db\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef get_metadata():\n    if hasattr(target_db, 'metadatas'):\n        return target_db.metadatas[None]\n    return target_db.metadata\ndef run_migrations_offline():",
        "detail": "src.migrations.env",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "def hello():\n    return \"Hello World!\"\n# Applications Routes\nfrom .accounts import urls\nif __name__ == \"__main__\":\n    app.run()",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.app",
        "description": "src.app",
        "peekOfCode": "app = create_app(os.getenv(\"CONFIG_MODE\"))\n# Hello World!\n@app.route('/')\ndef hello():\n    return \"Hello World!\"\n# Applications Routes\nfrom .accounts import urls\nif __name__ == \"__main__\":\n    app.run()",
        "detail": "src.app",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "src.config",
        "description": "src.config",
        "peekOfCode": "class Config:\n    SQLALCHEMY_TRACK_MODIFICATIONS = True\nclass DevelopmentConfig(Config):\n    DEVELOPMENT = True\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = os.getenv(\"DEVELOPMENT_DATABASE_URL\")\nclass TestingConfig(Config):\n    TESTING = True\n    SQLALCHEMY_DATABASE_URI = os.getenv(\"TEST_DATABASE_URL\")\nclass StagingConfig(Config):",
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "DevelopmentConfig",
        "kind": 6,
        "importPath": "src.config",
        "description": "src.config",
        "peekOfCode": "class DevelopmentConfig(Config):\n    DEVELOPMENT = True\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = os.getenv(\"DEVELOPMENT_DATABASE_URL\")\nclass TestingConfig(Config):\n    TESTING = True\n    SQLALCHEMY_DATABASE_URI = os.getenv(\"TEST_DATABASE_URL\")\nclass StagingConfig(Config):\n    DEVELOPMENT = True\n    DEBUG = True",
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "TestingConfig",
        "kind": 6,
        "importPath": "src.config",
        "description": "src.config",
        "peekOfCode": "class TestingConfig(Config):\n    TESTING = True\n    SQLALCHEMY_DATABASE_URI = os.getenv(\"TEST_DATABASE_URL\")\nclass StagingConfig(Config):\n    DEVELOPMENT = True\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = os.getenv(\"STAGING_DATABASE_URL\")\nclass ProductionConfig(Config):\n    DEBUG = False\n    SQLALCHEMY_DATABASE_URI = os.getenv(\"PRODUCTION_DATABASE_URL\")",
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "StagingConfig",
        "kind": 6,
        "importPath": "src.config",
        "description": "src.config",
        "peekOfCode": "class StagingConfig(Config):\n    DEVELOPMENT = True\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = os.getenv(\"STAGING_DATABASE_URL\")\nclass ProductionConfig(Config):\n    DEBUG = False\n    SQLALCHEMY_DATABASE_URI = os.getenv(\"PRODUCTION_DATABASE_URL\")\nconfig = {\n    \"development\": DevelopmentConfig,\n    \"testing\": TestingConfig,",
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "ProductionConfig",
        "kind": 6,
        "importPath": "src.config",
        "description": "src.config",
        "peekOfCode": "class ProductionConfig(Config):\n    DEBUG = False\n    SQLALCHEMY_DATABASE_URI = os.getenv(\"PRODUCTION_DATABASE_URL\")\nconfig = {\n    \"development\": DevelopmentConfig,\n    \"testing\": TestingConfig,\n    \"staging\": StagingConfig,\n    \"production\": ProductionConfig\n}",
        "detail": "src.config",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "src.config",
        "description": "src.config",
        "peekOfCode": "config = {\n    \"development\": DevelopmentConfig,\n    \"testing\": TestingConfig,\n    \"staging\": StagingConfig,\n    \"production\": ProductionConfig\n}",
        "detail": "src.config",
        "documentation": {}
    }
]